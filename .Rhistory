select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
-5:20
-(5:20)
View(cran)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
View(cran)
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US"
| | country == "IN")
filter(cran, country == "US"
| country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
exit
library(swirl)
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
options(editor = "internal")
swirl()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, desccount)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
package.install("tydr")
install.packages("tydr")
install.packages("tidyr")
library(tidyr)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
library(swirl)
sriwl
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = 'green', breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta" lwd = 4)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region, col = "red", data = pollution)
par(mfrow=c(2,1),mar=c(4,4,2,1))
east = subset(pollution, region == "east")
east = subset(pollution, region=="east")
east <- subset(pollution, region=="east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region=="west"), col = "green")
hist(subset(pollution, region=="west")$pm25, col = "green")
plot(pollution, plot())
plot(pollution$latitude, pollution$pm25)
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$longitude, main = "West")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, airquality)
xyplot(Ozone ~ Wind, airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Wind), airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | as.factor(Month), airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(x ~ y | f, layout = c(2,1))
xyplot(y ~ x | f, layout = c(2,1))
v1
v2
myedit("plot1.R")
options(editor = "internal")
myedit("plot1.R")
source(pathtofile(plot1.R), local = TRUE)
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile(myLabels.R), local = TRUE)
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price ~ carat | color * cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price ~ carat | color * cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(), 10)
colorRamp(c("red","blue"))
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","blue","yellow"))
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue","green"), alpha = .5)
p3(5)
rgb(0, .5, .5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRamp(col)
pal <- colorRamp(cols)
pal <- colorRampPallete(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv) + geom_smooth()
qplot(displ, hwy, data = mpg, color = drv, geom = c("point","smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facet = . ~ drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth", facets = ~ . drv))
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = ~ . drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = . ~  drv)
g <- ggplot(data = mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g <- ggplot(data = mpg, aes(displ, hwy), geom_point(color = "pink", size = 4, alpha = .5))
g <- ggplot(data = mpg, aes(displ, hwy))
g + geom_point(color = "pink", size = 4, alpha = .5)
g + geom_point(size = 4, alpha = .5, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 0.5) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", and ylim=c(-3,3))
plot(myx, myy, type="l", ylim=c(-3,3))
g <- ggplot(testdata, aes(myx, myy))
g <- ggplot(testdat, aes(myx, myy))
g + geom_line()
g + geom_line(ylim(-3,3))
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim(-3,3))
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(data = mpg, aes(x = displ, y = hwy), color = factor(year))
g <- ggplot(data = mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE)
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm") + facets = . ~ cut
qplot(carat, price, data = diamonds, color = cut, facets = . ~ cut) + geom_smooth(method = "lm")
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(data = diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendogram(hc))
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 0.4, col = "red")
5
5
abline(h = 0.05, color = "green")
12
abline(h = 0.05, color = "green")
dist(dFsm)
plot(hc)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
options(editor = "internal")
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd$v[,1:2]
svd2$v[,1:2]
svd2$d
dim(facedata)
dim(faceData)
a1 <- (svd1$u[,1] and svd1$d[1]) %*% t(svd1$v)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2] * svd1$d[1]) %*% t(svd1$v[,1:2]
)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
)
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10,11,12,"maxCon")])
mdist <- dist(sub1[,c(10,11,12,maxCon)])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kCl
kClust <- kmeans(sub1[,-c(562,563)], 6)
table(kClust$Cluster, sub1$activity)
table(kClust$cluster, sub1$activity)
table(kClust$cluster, sub1$activity, nstart = 100)
kClust <- kmeans(sub1[,-c(562,563)], 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
setwd("C:\\Users\\Renato\\RWeather")
raw <- read.csv("repdata-data-StormData.csv.bz2", stringsAsFactors = FALSE)
library(dplyr, quietly = TRUE)
exp_transf <- transform(raw, CROPDMGEXP = ifelse(CROPDMGEXP == "H" | CROPDMGEXP == "h", 100, CROPDMGEXP))
exp_transf <- transform(exp_transf, CROPDMGEXP = ifelse(CROPDMGEXP == "0", 10, CROPDMGEXP))
exp_transf <- transform(exp_transf, CROPDMGEXP = ifelse(CROPDMGEXP == "1", 10, CROPDMGEXP))
exp_transf <- transform(exp_transf, CROPDMGEXP = ifelse(CROPDMGEXP == "K" | CROPDMGEXP == "k", 1000, CROPDMGEXP))
exp_transf <- transform(exp_transf, CROPDMGEXP = ifelse(CROPDMGEXP == "M" | CROPDMGEXP == "m", 1000000, CROPDMGEXP))
exp_transf <- transform(exp_transf, CROPDMGEXP = ifelse(CROPDMGEXP == "B" | CROPDMGEXP == "b", 1000000000, CROPDMGEXP))
exp_transf <- transform(exp_transf, CROPDMGEXP = ifelse(CROPDMGEXP == "?", 0, CROPDMGEXP))
exp_transf <- transform(exp_transf, CROPDMGEXP = ifelse(CROPDMGEXP == "+", 1, CROPDMGEXP))
exp_transf <- transform(exp_transf, CROPDMGEXP = ifelse(CROPDMGEXP == "-", 0, CROPDMGEXP))
exp_transf <- transform(exp_transf, CROPDMGEXP = ifelse(CROPDMGEXP == "", 0, CROPDMGEXP))
exp_transf <- transform(exp_transf, CROPDMGEXP = ifelse(CROPDMGEXP == "2", 10, CROPDMGEXP))
exp_transf <- transform(exp_transf, CROPDMGEXP = ifelse(CROPDMGEXP == "3", 10, CROPDMGEXP))
exp_transf <- transform(exp_transf, CROPDMGEXP = ifelse(CROPDMGEXP == "4", 10, CROPDMGEXP))
exp_transf <- transform(exp_transf, CROPDMGEXP = ifelse(CROPDMGEXP == "5", 10, CROPDMGEXP))
exp_transf <- transform(exp_transf, CROPDMGEXP = ifelse(CROPDMGEXP == "6", 10, CROPDMGEXP))
exp_transf <- transform(exp_transf, CROPDMGEXP = ifelse(CROPDMGEXP == "7", 10, CROPDMGEXP))
exp_transf <- transform(exp_transf, CROPDMGEXP = ifelse(CROPDMGEXP == "8", 10, CROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "H" | PROPDMGEXP == "h", 100, PROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "0", 10, PROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "1", 10, PROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "K" | PROPDMGEXP == "k", 1000, PROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "M" | PROPDMGEXP == "m", 1000000, PROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "B" | PROPDMGEXP == "b", 1000000000, PROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "?", 0, PROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "+", 1, PROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "-", 0, PROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "", 0, PROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "2", 10, PROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "3", 10, PROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "4", 10, PROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "5", 10, PROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "6", 10, PROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "7", 10, PROPDMGEXP))
exp_transf <- transform(exp_transf, PROPDMGEXP = ifelse(PROPDMGEXP == "8", 10, PROPDMGEXP))
library(ggplot2)
View(exp_transf)
sum_prop_dmg <- sqldf("select sum(PROPDMG * PROPDMGEXP), EVTYPE from exp_transf group by EVTYPE")
library(sqldf)
sum_prop_dmg <- sqldf("select sum(PROPDMG * PROPDMGEXP), EVTYPE from exp_transf group by EVTYPE")
View(sum_prop_dmg)
sum_crop_dmg <- sqldf("select sum(CROPDMG * CROPDMGEXP), EVTYPE from exp_transf group by EVTYPE")
View(sum_crop_dmg)
sum_pop_health <- sqldf("select sum(INJURIES + FATALITIES), EVTYPE from exp_transf group by EVTYPE")
View(sum_pop_health)
colnames(sum_prop_dmg) <- c("damage","event")
colnames(sum_crop_dmg) <- c("damage","event")
colnames(sum_pop_health) <- c("damage","event")
gg <- ggplot(sum_crop_dmg, aes(x = as.factor(event), y = damage))
gg + geom_bar()
gg <- ggplot(sum_crop_dmg, aes(x = as.factor(event), y = damage)) + geom_bar()
print(gg)
gg <- ggplot(sum_crop_dmg, aes(x = as.factor(event), y = damage)) + geom_bar(stat = "identity")
print(gg)
sum_prop_dmg_10 <- head(sum_prop_dmg, n = 10)
sum_crop_dmg_10 <- head(sum_crop_dmg, n = 10)
sum_pop_health_10 <- head(sum_pop_health, n = 10)
gg <- ggplot(sum_crop_dmg_10, aes(x = as.factor(event), y = damage)) + geom_bar(stat = "identity")
print(gg)
View(sum_prop_dmg_10)
sum_prop_dmg <- sqldf("select sum(PROPDMG * PROPDMGEXP), EVTYPE from exp_transf group by EVTYPE order by $1")
sum_prop_dmg <- sqldf("select sum(PROPDMG * PROPDMGEXP), EVTYPE from exp_transf group by EVTYPE")
library(dplyr, quietly = TRUE)
sum_prop_dmg <- sqldf("select sum(PROPDMG * PROPDMGEXP), EVTYPE from exp_transf group by EVTYPE")
sum_crop_dmg <- sqldf("select sum(CROPDMG * CROPDMGEXP), EVTYPE from exp_transf group by EVTYPE")
sum_pop_health <- sqldf("select sum(INJURIES + FATALITIES), EVTYPE from exp_transf group by EVTYPE")
# Change the colnames
colnames(sum_prop_dmg) <- c("damage","event")
colnames(sum_crop_dmg) <- c("damage","event")
colnames(sum_pop_health) <- c("damage","event")
# Order the data
sum_prop_dmg <- arrange(sum_prop_dmg, desc(damage))
sum_crop_dmg <- arrange(sum_crop_dmg, desc(damage))
sum_pop_health <- arrange(sum_pop_health, desc(damage))
# Extract the top 10 events of each view
sum_prop_dmg_10 <- head(sum_prop_dmg, n = 10)
sum_crop_dmg_10 <- head(sum_crop_dmg, n = 10)
sum_pop_health_10 <- head(sum_pop_health, n = 10)
View(sum_prop_dmg)
View(sum_prop_dmg_10)
gg <- ggplot(sum_crop_dmg_10, aes(x = as.factor(event), y = damage)) + geom_bar(stat = "identity")
print(gg)
View(sum_crop_dmg_10)
gg <- ggplot(sum_crop_dmg_10, aes(x = as.factor(event), y = damage)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(gg)
gg <- ggplot(sum_crop_dmg_10, aes(x = event, y = damage)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(gg)
View(sum_crop_dmg_10)
barplot(sum_crop_dmg_10$event, sum_crop_dmg_10$damage)
barplot(sum_crop_dmg_10$damage, sum_crop_dmg_10$event)
str(sum_crop_dmg_10)
gg <- ggplot(sum_crop_dmg_10, aes(x = event, y = damage)) + geom_bar() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(gg)
sum_crop_dmg_10 <- transform(sum_crop_dmg_10, event = as.factor(event))
View(sum_prop_dmg_10)
sum_prop_dmg <- sqldf("select sum(PROPDMG * PROPDMGEXP), EVTYPE from exp_transf group by EVTYPE")
sum_crop_dmg <- sqldf("select sum(CROPDMG * CROPDMGEXP), EVTYPE from exp_transf group by EVTYPE")
sum_pop_health <- sqldf("select sum(INJURIES + FATALITIES), EVTYPE from exp_transf group by EVTYPE")
# Change the colnames
colnames(sum_prop_dmg) <- c("damage","event")
colnames(sum_crop_dmg) <- c("damage","event")
colnames(sum_pop_health) <- c("damage","event")
# Transform to factor and order the data
sum_prop_dmg <- transform(sum_prop_dmg, event = as.factor(event))
sum_crop_dmg <- transform(sum_crop_dmg, event = as.factor(event))
sum_pop_health <- transform(sum_pop_health, event = as.factor(event))
sum_prop_dmg <- arrange(sum_prop_dmg, desc(damage))
sum_crop_dmg <- arrange(sum_crop_dmg, desc(damage))
sum_pop_health <- arrange(sum_pop_health, desc(damage))
# Extract the top 10 events of each view
sum_prop_dmg_10 <- head(sum_prop_dmg, n = 10)
sum_crop_dmg_10 <- head(sum_crop_dmg, n = 10)
sum_pop_health_10 <- head(sum_pop_health, n = 10)
View(sum_prop_dmg_10)
gg <- ggplot(sum_crop_dmg_10, aes(x = event, y = damage)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(gg)
View(sum_crop_dmg_10)
gg <- ggplot(sum_crop_dmg_10, aes(x = event, y = damage)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_y_continuous("",formatter="percent") + coord_flip()
ggplot(sum_crop_dmg_10, aes(x=event,y=damage)) + geom_bar() +
scale_y_continuous("",formatter="percent") + coord_flip()
+  xlim(rev(levels(sum_crop_dmg_10$event)))
ggplot(sum_crop_dmg_10, aes(x=event,y=damage)) + geom_bar() +
scale_y_continuous("",formatter="percent") + coord_flip()
sum_prop_dmg <- transform(sum_prop_dmg, event = as.factor(event, levels = sum_prop_dmg$event[order(sum_prop_dmg$event)]))
sum_prop_dmg_10$event <- factor(sum_prop_dmg_10$event, levels = sum_prop_dmg_10$event)
gg <- ggplot(sum_prop_dmg_10, aes(x = event, y = damage)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(gg)
View(sum_prop_dmg_10)
sum_prop_dmg_10$event <- factor(sum_prop_dmg_10$event)
sum_crop_dmg_10$event <- factor(sum_crop_dmg_10$event)
sum_pop_health_10$event <- factor(sum_pop_health_10$event)
ggplot(sum_prop_dmg_10, aes(x = event, y = damage)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(sum_prop_dmg_10, aes(x = event, y = damage)) + geom_bar(stat = "identity")
+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
+ xlab("Event Type") + ylab("Damage in Dollars") + ggtitle("Number of Fatalities in the US by Event")
ggplot(sum_prop_dmg_10, aes(x = event, y = damage)) + geom_bar(stat = "identity")
ggplot(sum_prop_dmg_10, aes(x = event, y = damage)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Damage in Dollars") + ggtitle("Number of Fatalities in the US by Event")
options(scipen = 999, digits = 8)
ggplot(sum_prop_dmg_10, aes(x = event, y = damage)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Damage in Dollars") + ggtitle("Number of Fatalities in the US by Event")
ggplot(sum_pop_health_10, aes(x = event, y = damage)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Damage in Dollars") + ggtitle("Number of Fatalities in the US by Event")
sum_prop_dmg_10$event <- factor(sum_prop_dmg_10$event, levels = sum_prop_dmg_10$event)
sum_crop_dmg_10$event <- factor(sum_crop_dmg_10$event, levels = sum_crop_dmg_10$event)
sum_pop_health_10$event <- factor(sum_pop_health_10$event, levels = sum_pop_health_10$event)
ggplot(sum_pop_health_10, aes(x = event, y = damage)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Damage in Dollars") + ggtitle("Number of Fatalities in the US by Event")
